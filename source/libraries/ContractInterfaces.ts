// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

    import BN = require('bn.js');
    import { encodeMethod, decodeParams } from 'ethjs-abi';
    import { AbiFunction } from 'ethereum';
    import { AccountManager } from './AccountManager';
    import { Connector } from './Connector';

    /**
     * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a locally version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
     */

    export class Contract {
        protected readonly connector: Connector;
        protected readonly accountManager: AccountManager;
        public readonly address: string;
        protected readonly defaultGasPrice: BN;

        protected constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            this.connector = connector;
            this.accountManager = accountManager;
            this.address = address;
            this.defaultGasPrice = defaultGasPrice;
        }

        protected async localCall(abi: AbiFunction, parameters: Array<any>, sender?: string, attachedEth?: BN): Promise<Array<any>> {
            const from = sender || this.accountManager.defaultAddress;
            const data = encodeMethod(abi, parameters);
            const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {});
            const result = await this.connector.ethjsQuery.call(transaction);
            return decodeParams(abi.outputs.map(x => x.name), abi.outputs.map(x => x.type), result);
        }

        protected async remoteCall(abi: AbiFunction, parameters: Array<any>, txName: String, sender?: string, gasPrice?: BN, attachedEth?: BN): Promise<void> {
            const from = sender || this.accountManager.defaultAddress;
            const data = encodeMethod(abi, parameters);
            let gas = await this.connector.ethjsQuery.estimateGas(Object.assign({ to: this.address, from: from, data: data }, attachedEth ? { value: attachedEth } : {} ));
            // This is to address an observed bug while running against geth where occasionally gas estimates are lower than required: https://github.com/ethereum/go-ethereum/issues/15896
            gas = BN.min(new BN(6950000), gas.add(gas.div(new BN(10))));
            gasPrice = gasPrice || this.defaultGasPrice;
            const transaction = Object.assign({ from: from, to: this.address, data: data, gasPrice: gasPrice, gas: gas }, attachedEth ? { value: attachedEth } : {});
            const signedTransaction = await this.accountManager.signTransaction(transaction);
            const transactionHash = await this.connector.ethjsQuery.sendRawTransaction(signedTransaction);
            const txReceipt = await this.connector.waitForTransactionReceipt(transactionHash, `Waiting on receipt for tx: ${txName}`);
            if (txReceipt.status != 1) {
                throw new Error(`Tx ${txName} failed: ${txReceipt}`);
            }
        }
    }

    
    export class VoxFab extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public newVox = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"newVox","outputs":[{"name":"vox","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "newVox", options.sender, options.gasPrice);
            return;
        }

        public newVox_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"newVox","outputs":[{"name":"vox","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }
    }


    export class SaiMom extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public setOwner = async(wner_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [wner_], "setOwner", options.sender, options.gasPrice);
            return;
        }

        public setOwner_ = async(wner_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [wner_], options.sender);
            
        }

        public setTubGap = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"setTubGap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "setTubGap", options.sender, options.gasPrice);
            return;
        }

        public setTubGap_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"setTubGap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public setTapGap = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"setTapGap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "setTapGap", options.sender, options.gasPrice);
            return;
        }

        public setTapGap_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"setTapGap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public setTax = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setTax","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "setTax", options.sender, options.gasPrice);
            return;
        }

        public setTax_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setTax","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public tub_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"tub","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setCap = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"setCap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "setCap", options.sender, options.gasPrice);
            return;
        }

        public setCap_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"setCap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public vox_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"vox","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setFee = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "setFee", options.sender, options.gasPrice);
            return;
        }

        public setFee_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public setAuthority = async(uthority_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [uthority_], "setAuthority", options.sender, options.gasPrice);
            return;
        }

        public setAuthority_ = async(uthority_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [uthority_], options.sender);
            
        }

        public setMat = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setMat","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "setMat", options.sender, options.gasPrice);
            return;
        }

        public setMat_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setMat","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public setPip = async(ip_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"pip_","type":"address"}],"name":"setPip","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ip_], "setPip", options.sender, options.gasPrice);
            return;
        }

        public setPip_ = async(ip_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"pip_","type":"address"}],"name":"setPip","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ip_], options.sender);
            
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setHow = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setHow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "setHow", options.sender, options.gasPrice);
            return;
        }

        public setHow_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setHow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public setAxe = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setAxe","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "setAxe", options.sender, options.gasPrice);
            return;
        }

        public setAxe_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setAxe","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public setWay = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setWay","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "setWay", options.sender, options.gasPrice);
            return;
        }

        public setWay_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"setWay","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public authority_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"authority","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setVox = async(ox_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"vox_","type":"address"}],"name":"setVox","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ox_], "setVox", options.sender, options.gasPrice);
            return;
        }

        public setVox_ = async(ox_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"vox_","type":"address"}],"name":"setVox","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ox_], options.sender);
            
        }

        public setPep = async(ep_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"pep_","type":"address"}],"name":"setPep","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ep_], "setPep", options.sender, options.gasPrice);
            return;
        }

        public setPep_ = async(ep_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"pep_","type":"address"}],"name":"setPep","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ep_], options.sender);
            
        }

        public tap_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"tap","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }
    }


    export class GemPit extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public burn = async(em: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"gem","type":"address"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [em], "burn", options.sender, options.gasPrice);
            return;
        }

        public burn_ = async(em: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"gem","type":"address"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [em], options.sender);
            
        }
    }


    export class SaiTap extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public heal = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"heal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "heal", options.sender, options.gasPrice);
            return;
        }

        public heal_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"heal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public sin_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"sin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public skr_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"skr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setOwner = async(wner_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [wner_], "setOwner", options.sender, options.gasPrice);
            return;
        }

        public setOwner_ = async(wner_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [wner_], options.sender);
            
        }

        public vent = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"vent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "vent", options.sender, options.gasPrice);
            return;
        }

        public vent_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"vent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public cash = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"cash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "cash", options.sender, options.gasPrice);
            return;
        }

        public cash_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"cash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public woe_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"woe","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public tub_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"tub","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public mock = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"mock","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "mock", options.sender, options.gasPrice);
            return;
        }

        public mock_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"mock","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public bid = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"bid","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "bid", options.sender, options.gasPrice);
            return;
        }

        public bid_ = async(ad: BN, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"bid","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [ad], options.sender);
            return <BN>result[0];
        }

        public joy_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"joy","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public s2s = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"s2s","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "s2s", options.sender, options.gasPrice);
            return;
        }

        public s2s_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"s2s","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public off_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"off","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public vox_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"vox","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public gap_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"gap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public fog_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fog","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public setAuthority = async(uthority_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [uthority_], "setAuthority", options.sender, options.gasPrice);
            return;
        }

        public setAuthority_ = async(uthority_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [uthority_], options.sender);
            
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public sai_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"sai","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public mold = async(aram: string, al: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"param","type":"bytes32"},{"name":"val","type":"uint256"}],"name":"mold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [aram, al], "mold", options.sender, options.gasPrice);
            return;
        }

        public mold_ = async(aram: string, al: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"param","type":"bytes32"},{"name":"val","type":"uint256"}],"name":"mold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [aram, al], options.sender);
            
        }

        public cage = async(ix_: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"fix_","type":"uint256"}],"name":"cage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ix_], "cage", options.sender, options.gasPrice);
            return;
        }

        public cage_ = async(ix_: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"fix_","type":"uint256"}],"name":"cage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ix_], options.sender);
            
        }

        public fix_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fix","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public bust = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"bust","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "bust", options.sender, options.gasPrice);
            return;
        }

        public bust_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"bust","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public boom = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"boom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "boom", options.sender, options.gasPrice);
            return;
        }

        public boom_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"boom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public authority_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"authority","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public ask = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"ask","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "ask", options.sender, options.gasPrice);
            return;
        }

        public ask_ = async(ad: BN, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"ask","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [ad], options.sender);
            return <BN>result[0];
        }
    }


    export class SaiTop extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public sin_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"sin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public skr_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"skr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setOwner = async(wner_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [wner_], "setOwner", options.sender, options.gasPrice);
            return;
        }

        public setOwner_ = async(wner_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [wner_], options.sender);
            
        }

        public era_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"era","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public flow = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"flow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "flow", options.sender, options.gasPrice);
            return;
        }

        public flow_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"flow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public tub_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"tub","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setCooldown = async(ooldown_: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cooldown_","type":"uint256"}],"name":"setCooldown","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ooldown_], "setCooldown", options.sender, options.gasPrice);
            return;
        }

        public setCooldown_ = async(ooldown_: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"cooldown_","type":"uint256"}],"name":"setCooldown","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ooldown_], options.sender);
            
        }

        public vox_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"vox","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public cage = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"cage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "cage", options.sender, options.gasPrice);
            return;
        }

        public cage_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"cage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public cooldown_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cooldown","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public setAuthority = async(uthority_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [uthority_], "setAuthority", options.sender, options.gasPrice);
            return;
        }

        public setAuthority_ = async(uthority_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [uthority_], options.sender);
            
        }

        public gem_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"gem","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public sai_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"sai","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public fix_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fix","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public authority_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"authority","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public fit_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public caged_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"caged","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public tap_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"tap","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }
    }


    export class SaiTubEvents extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        

    }


    export class SaiVox extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public prod = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"prod","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "prod", options.sender, options.gasPrice);
            return;
        }

        public prod_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"prod","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public setOwner = async(wner_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [wner_], "setOwner", options.sender, options.gasPrice);
            return;
        }

        public setOwner_ = async(wner_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [wner_], options.sender);
            
        }

        public era_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"era","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public how_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"how","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public par = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"par","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "par", options.sender, options.gasPrice);
            return;
        }

        public par_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"par","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public tell = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"tell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "tell", options.sender, options.gasPrice);
            return;
        }

        public tell_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"tell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public way = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"way","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "way", options.sender, options.gasPrice);
            return;
        }

        public way_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"way","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public setAuthority = async(uthority_: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [uthority_], "setAuthority", options.sender, options.gasPrice);
            return;
        }

        public setAuthority_ = async(uthority_: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [uthority_], options.sender);
            
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public mold = async(aram: string, al: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"param","type":"bytes32"},{"name":"val","type":"uint256"}],"name":"mold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [aram, al], "mold", options.sender, options.gasPrice);
            return;
        }

        public mold_ = async(aram: string, al: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"param","type":"bytes32"},{"name":"val","type":"uint256"}],"name":"mold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [aram, al], options.sender);
            
        }

        public fix_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fix","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public tune = async(ay: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"tune","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ay], "tune", options.sender, options.gasPrice);
            return;
        }

        public tune_ = async(ay: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"ray","type":"uint256"}],"name":"tune","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ay], options.sender);
            
        }

        public authority_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"authority","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public tau_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"tau","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }
    }


    export class WETH9 extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }
        
        public name_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public approve = async(uy: string, ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"guy","type":"address"},{"name":"wad","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [uy, ad], "approve", options.sender, options.gasPrice);
            return;
        }

        public approve_ = async(uy: string, ad: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"guy","type":"address"},{"name":"wad","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [uy, ad], options.sender);
            return <boolean>result[0];
        }

        public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public transferFrom = async(rc: string, st: string, ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [rc, st, ad], "transferFrom", options.sender, options.gasPrice);
            return;
        }

        public transferFrom_ = async(rc: string, st: string, ad: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [rc, st, ad], options.sender);
            return <boolean>result[0];
        }

        public withdraw = async(ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ad], "withdraw", options.sender, options.gasPrice);
            return;
        }

        public withdraw_ = async(ad: BN, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ad], options.sender);
            
        }

        public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public balanceOf_ = async(arg0: string, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [arg0], options.sender);
            return <BN>result[0];
        }

        public symbol_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public transfer = async(st: string, ad: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [st, ad], "transfer", options.sender, options.gasPrice);
            return;
        }

        public transfer_ = async(st: string, ad: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [st, ad], options.sender);
            return <boolean>result[0];
        }

        public deposit = async( options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"};
            await this.remoteCall(abi, [], "deposit", options.sender, options.gasPrice, options.attachedEth);
            return;
        }

        public deposit_ = async( options?: { sender?: string, attachedEth?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"};
            await this.localCall(abi, [], options.sender, options.attachedEth);
            
        }

        public allowance_ = async(arg0: string, arg1: string, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [arg0, arg1], options.sender);
            return <BN>result[0];
        }
    }

    